@page "/reservations/delete"
@using Microsoft.EntityFrameworkCore
@using Application.Models
@inject IDbContextFactory<Application.Database.ApplicationDbContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Reservation</h2>
    <hr />
    @if (reservation is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">AccessCode</dt>
            <dd class="col-sm-10">@reservation.AccessCode</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Name</dt>
            <dd class="col-sm-10">@reservation.Name</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">Description</dt>
            <dd class="col-sm-10">@reservation.Description</dd>
        </dl>
        <EditForm method="post" Model="reservation" OnValidSubmit="DeleteReservation" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(reservation is null)">Delete</button> |
            <a href="/reservations">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Reservation? reservation;

    [SupplyParameterFromQuery]
    private Guid Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        reservation = await context.Reservation.FirstOrDefaultAsync(m => m.Id == Id);

        if (reservation is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteReservation()
    {
        using var context = DbFactory.CreateDbContext();
        context.Reservation.Remove(reservation!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/reservations");
    }
}
